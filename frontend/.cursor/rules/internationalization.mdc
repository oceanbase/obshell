---
globs: src/locale/**/*,src/page/**/*,src/component/**/*
description: 国际化(i18n)开发规范
---

# 国际化开发规范

## 国际化文件结构

项目支持中英双语，语言文件位于 `src/locale/`：
- [zh-CN.js](mdc:src/locale/zh-CN.js): 中文(简体)
- [en-US.js](mdc:src/locale/en-US.js): 英文

## 文本键值规范

### 1. 命名约定
```javascript
// 按模块.页面.组件.具体文本 的层级结构
export default {
  // 通用文本
  common: {
    confirm: '确认',
    cancel: '取消',
    submit: '提交',
    reset: '重置',
    search: '搜索',
    edit: '编辑',
    delete: '删除',
    view: '查看',
  },

  // 模块级文本
  cluster: {
    title: '集群管理',
    overview: {
      title: '集群概览',
      performance: '性能指标',
    },
    host: {
      title: '主机管理',
      addHost: '添加主机',
    },
  },

  // 表单验证
  validation: {
    required: '此项为必填项',
    emailFormat: '请输入正确的邮箱格式',
    passwordLength: '密码长度不能少于8位',
  },
};
```

### 2. 使用规范

在组件中使用国际化文本：

```typescript
import { useIntl } from 'umi';

const Component: React.FC = () => {
  const intl = useIntl();

  return (
    <div>
      <h1>{intl.formatMessage({ id: 'cluster.title' })}</h1>
      <Button>
        {intl.formatMessage({ id: 'common.submit' })}
      </Button>
    </div>
  );
};
```

## 动态文本处理

### 1. 带参数的文本
```javascript
// zh-CN.js
export default {
  message: {
    deleteConfirm: '确认删除 {name} 吗？',
    itemCount: '共 {count} 项',
  },
};

// 组件中使用
const message = intl.formatMessage(
  { id: 'message.deleteConfirm' },
  { name: '集群A' }
);
```

### 2. 复数形式
```javascript
// zh-CN.js
export default {
  message: {
    itemCount: '{count, plural, =0 {暂无数据} =1 {1项} other {#项}}',
  },
};
```

## 最佳实践

### 1. 文本提取原则
- **所有用户可见文本**都必须国际化
- **不要**国际化调试信息、console.log等开发文本
- **API返回的错误信息**需要在前端映射为本地化文本

### 2. 键值设计
- 使用**语义化**的键名，避免简单的序号
- 键名使用**小驼峰**命名法
- 按**功能模块**组织，便于维护

### 3. 文本内容
- 保持**简洁明了**，符合用户习惯
- **避免**过长的句子，考虑不同语言的表达习惯
- 重要操作添加**确认提示**

### 4. 开发流程
1. 先用中文开发功能
2. 将硬编码文本提取到语言文件
3. 添加对应的英文翻译
4. 测试两种语言的显示效果

## 常用国际化模式

### 表格列定义
```typescript
const columns = [
  {
    title: intl.formatMessage({ id: 'common.name' }),
    dataIndex: 'name',
  },
  {
    title: intl.formatMessage({ id: 'common.status' }),
    dataIndex: 'status',
  },
];
```

### 表单标签
```typescript
<Form.Item
  label={intl.formatMessage({ id: 'user.username' })}
  name="username"
>
  <Input placeholder={intl.formatMessage({ id: 'user.usernamePlaceholder' })} />
</Form.Item>
```

### 操作确认
```typescript
const handleDelete = () => {
  Modal.confirm({
    title: intl.formatMessage({ id: 'common.deleteConfirm' }),
    content: intl.formatMessage(
      { id: 'message.deleteItem' },
      { name: record.name }
    ),
    onOk: () => {
      // 执行删除
    },
  });
};
```
